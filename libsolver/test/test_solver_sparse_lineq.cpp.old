#include <gtest/gtest.h>

#include "solver/solver/solver_sparse_lineq.h"
#include "solver/solver/sparse.h"

using namespace solver;
using namespace ::testing;

class SparseMatTest : public Test
{
public:
    SparseMatTest()
    :mat(w, h)
    {
        float *data = new float[w * h]{
            1.f, 4.f, 0.f, 0.f, 0.f, 
            0.f, 2.f, 3.f, 0.f, 0.f, 
            5.f, 0.f, 0.f, 7.f, 8.f, 
            0.f, 0.f, 9.f, 0.f, 6.f
        };

        matData = cv::Mat(h, w, CV_32FC1, data);

        for (int x = 0; x < w; x++)
        {
            for (int y = 0; y < h; y++)
            {
                const int idx = y * w + x;
                if (data[idx] > 0)
                {
                    mat.add(idx, x, y, data[idx]);
                    nonZero++;
                }
            }
        }
    }

    int w = 5;
    int h = 4;
    int nonZero = 0;

    SparseMat mat;
    cv::Mat matData;
};
 
/*
TEST_F(SparseMatTest, returns_valid_dimensions)
{
    EXPECT_EQ(w, mat.cols());
    EXPECT_EQ(h, mat.rows());
    EXPECT_EQ(nonZero, mat.nonZero());
}

TEST_F(SparseMatTest, contains_all_data)
{
    cv::Mat out = mat.dense();

    for (int i = 0; i < w * h; i++)
        EXPECT_FLOAT_EQ(matData.at<float>(i), out.at<float>(i));
}

TEST_F(SparseMatTest, creates_submatrix)
{
    std::set<int> subIdx = { 0, 2, 3 };

    auto subCol = mat.subMatrix(subIdx, 0);
    
    EXPECT_EQ(mat.rows(), subCol.rows());
    EXPECT_EQ(subIdx.size(), subCol.cols());

    auto subRow = mat.subMatrix(subIdx, 1);

    EXPECT_EQ(subIdx.size(), subRow.rows());
    EXPECT_EQ(mat.cols(), subRow.cols());
}

TEST_F(SparseMatTest, removes_empty_row_colum)
{
    SparseMat sp(5, 5);
    sp.add(2, 2, 0, 1.f);
    sp.add(6, 1, 1, 1.f);

    auto spE = sp.removeEmpty(0);
    EXPECT_EQ(sp.rows(), spE.rows());
    EXPECT_EQ(2, spE.cols());
}

TEST_F(SparseMatTest, multiply_drops_zero_or_invalid_entries)
{
    cv::Mat z = cv::Mat::zeros(h, w, CV_32FC1);

    z.at<float>(3) = std::numeric_limits<float>::infinity();
    z.at<float>(5) = -std::numeric_limits<float>::infinity();
    z.at<float>(7) = std::nanf("");

    auto spZ = mat.multiply(z);
    EXPECT_EQ(0, spZ.nonZero());
}

TEST_F(SparseMatTest,  multiply_by_ones_creates_identical_mat)
{
    cv::Mat o = cv::Mat::ones(h, w, CV_32FC1);

    auto out = mat.multiply(o).dense();
    ASSERT_EQ(w, out.cols);
    ASSERT_EQ(h, out.rows);

    for (int i = 0; i < w * h; i++)
        EXPECT_FLOAT_EQ(matData.at<float>(i), out.at<float>(i));
}

TEST_F(SparseMatTest, multiply_with_half_mat_creates_valid_mat)
{
    // Create mat width_x1 to multiply with
    cv::Mat ones = cv::Mat::ones(1, w, CV_32FC1);
    ones.at<float>(1) = 3.f;
    ones.at<float>(2) = 4.f;

    // Output should be height_x1
    auto out = mat.multiply(ones);
    ASSERT_EQ(1, out.cols());
    ASSERT_EQ(h, out.rows());
}

TEST_F(SparseMatTest, creates_valid_coo_pointers)
{
    // 1 4 0 0 0
    // 0 2 3 0 0 
    // 5 0 0 7 8
    // 0 0 9 0 6 
    
    const int cooColIdx[] = { 0, 1, 1, 2, 0, 3, 4, 2, 4 };
    const int cooRowIdx[] = { 0, 0, 1, 1, 2, 2, 2, 3, 3 };
    const float cooVals[] = { 1.f, 4.f, 2.f, 3.f, 5.f, 7.f, 8.f, 9.f, 6.f };
    
    auto tpl = mat.coo();
    auto matRowIdx = std::get<0>(tpl);
    auto matColIdx = std::get<1>(tpl);
    auto matVals = std::get<2>(tpl);

    auto num = mat.nonZero();
    for (int i = 0; i < num; i++)
    {
        EXPECT_EQ(cooColIdx[i], matColIdx[i]);
        EXPECT_EQ(cooRowIdx[i], matRowIdx[i]);
        EXPECT_FLOAT_EQ(cooVals[i], matVals[i]);
    }
}

TEST_F(SparseMatTest, creates_valid_csr_pointers)
{
    // 1 4 0 0 0
    // 0 2 3 0 0 
    // 5 0 0 7 8
    // 0 0 9 0 6 

    const int csrColIdx[] = { 0, 1, 1, 2, 0, 3, 4, 2, 4 };
    const int csrRowIdx[] = { 0, 2, 4, 7, 9 };
    const float csrVals[] = { 1.f, 4.f, 2.f, 3.f, 5.f, 7.f, 8.f, 9.f, 6.f };
    
    auto tpl = mat.csr();
    auto matRowIdx = std::get<0>(tpl);
    auto matColIdx = std::get<1>(tpl);
    auto matVals = std::get<2>(tpl);

    auto num = mat.nonZero();
    for (int i = 0; i < num; i++)
    {
        EXPECT_EQ(csrColIdx[i], matColIdx[i]);
        EXPECT_FLOAT_EQ(csrVals[i], matVals[i]);
    }

    for (int i = 0; i < h + 1; i++)
    {
        EXPECT_EQ(csrRowIdx[i], matRowIdx[i]);
    }
}

TEST_F(SparseMatTest, handles_leading_zeros_correct)
{   
    // 0 0 0 
    // 0 0 0
    // 0 0 1

    SparseMat m(3, 3);
    m.add(8, 2, 2, 1.f);

    const int csrColIdx[] = { 2 };
    const int csrRowIdx[] = { 0, 0, 0, 1 };
    const float csrVals[] = { 1.f };

    auto tpl = m.csr();
    auto matRowIdx = std::get<0>(tpl);
    auto matColIdx = std::get<1>(tpl);
    auto matVals = std::get<2>(tpl);

    auto num = m.nonZero();
    for (int i = 0; i < num; i++)
    {
        EXPECT_EQ(csrColIdx[i], matColIdx[i]);
        EXPECT_FLOAT_EQ(csrVals[i], matVals[i]);
    }

    for (int i = 0; i < 4; i++)
    {
        EXPECT_EQ(csrRowIdx[i], matRowIdx[i]);
    }
}


TEST_F(SparseMatTest, handles_trailing_zeros_correct)
{

    // 0 1 2
    // 0 0 0
    // 0 0 0

    SparseMat m(3, 3);
    m.add(1, 1, 0, 1.f);
    m.add(2, 2, 0, 2.f);
    
    const int csrColIdx[] = { 1, 2 };
    const int csrRowIdx[] = { 0, 2, 2, 2 };
    const float csrVals[] = { 1.f, 2.f };

    auto tpl = m.csr();
    auto matRowIdx = std::get<0>(tpl);
    auto matColIdx = std::get<1>(tpl);
    auto matVals = std::get<2>(tpl);

    auto num = m.nonZero();
    for (int i = 0; i < num; i++)
    {
        EXPECT_EQ(csrColIdx[i], matColIdx[i]);
        EXPECT_FLOAT_EQ(csrVals[i], matVals[i]);
    }

    for (int i = 0; i < 4; i++)
    {
        EXPECT_EQ(csrRowIdx[i], matRowIdx[i]);
    }
}


class SparseLinEQTest : public Test
{
public:
    SparseLinEQTest()
     :A(w, h)
    {
        float *data = new float[w * h]{
            0, 1, 2, 1,
            1, 0, 1, 0,
            2, 1, 0, 0,
            1, 3, 0, 0,
            0, 1, 1, 4
        };

        float *rhs = new float[h]{
            4, 5, 3, 2, 1
        };

        b = cv::Mat(1, h, CV_32FC1, rhs);

        for (int x = 0; x < w; x++)
        {
            for (int y = 0; y < h; y++)
            {
                const int idx = y * w + x;
                if (data[idx] > 0)
                {
                    A.add(idx, x, y, data[idx]);
                    nonZero++;
                }
            }
        }
    }

    int w = 4;
    int h = 5;
    int nonZero = 0;

    SparseMat A;
    cv::Mat b;
};

TEST_F(SparseLinEQTest, can_solve)
{
    SparseLinearEquationSolver s;
    auto x = s.solve(A, b);

    EXPECT_FLOAT_EQ(x.at<float>(0),  1.78329860);
    EXPECT_FLOAT_EQ(x.at<float>(1), -0.02546985);
    EXPECT_FLOAT_EQ(x.at<float>(2),  2.42755770);
    EXPECT_FLOAT_EQ(x.at<float>(3), -0.37870560);
}
*/